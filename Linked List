class Node:
    def __init__(self,data):
        self.data = data
        self.ref = None
          
class LinkedList:
    def __init__(self):
        self.head = None
    #can add, delete or traverse
    #how to traverse - going through each node and printing them,
    def print_LL(self):
        if self.head is None:
            print("LL is empty")
        else:
            n = self.head
            while n is not None:
                print(n.data, "--->", end = " ")
                n = n.ref
                
    def add_begin(self, data):
        new_node = Node(data) # DATA|NONE
        new_node.ref = self.head #assigning the initial first node ref to new first node to create the link between the node
        self.head = new_node # making the head point to the new first node
        
    def add_end(self, data):
        new_node = Node(data)
        if self.head is None: #checking if the LL is empty or not
            self.head = new_node
        else:
            n = self.head
            while n.ref is not None:
                n = n.ref # going to the next node
            n.ref = new_node
            

LL1 = LinkedList()
LL1.add_begin(10)
LL1.add_begin(20)
LL1.add_end(100)
LL1.add_end(500)
LL1.print_LL()



        
