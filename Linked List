class Node:
    def __init__(self,data):
        self.data = data
        self.ref = None
          
class LinkedList:
    def __init__(self):
        self.head = None
    #can add, delete or traverse
    #how to traverse - going through each node and printing them,
    def print_LL(self):
        if self.head is None:
            print("LL is empty")
        else:
            n = self.head
            while n is not None:
                print(n.data, "--->", end = " ")
                n = n.ref
                
    # ADDING AT THE BEGINNING OF THE LL
    # 1. create the node
    # 2. new_node ref = head
    # 3 . head = new_node
    def add_begin(self, data):
        new_node = Node(data) # DATA|NONE
        new_node.ref = self.head #assigning the initial first node ref to new first node to create the link between the nodes
        self.head = new_node # making the head point to the new first node
        
    # ADDING AT THE END OF THE LL
    # 1. create the node
    #.    - check if LL is empty, if yes, jusr add the node at the start!
    #     - else add manually
    # 2. new_node ref = None
    # 3. Last node ref = new_node
    def add_end(self, data):
        new_node = Node(data)
        if self.head is None: #checking if the LL is empty or not
            self.head = new_node
        else:
            n = self.head
            while n.ref is not None:
                n = n.ref # going to the next node
            n.ref = new_node
            
    # ADDING AT THE GIVEN INDEX (between the LL) - AFTER A GIVEN NODE
    # 
    # 2. after_node (self, data , X) X = the node after you want to add
    #       - first must find the X:
    #       - check if n.data = x (data of the node you want) - use while loop to go there
    # 1. create the node
    # 3  n.ref = new_node
    def add_after(self, data, x):
        n = self.head
        while n is not None:
            if x == n.data:
                break
            else:
                n = n.ref # going to the next node to check for x
        if n is None:
            print("node is not present in LL")
        else:
            new_node = Node(data) #creating a new node
            new_node.ref = n.ref #x node has this ref
            n.ref = new_node
            
    # ADDING AT THE GIVEN INDEX (between the LL) - BEFORE A GIVEN NODE
    # 
    # 2. after_node (self, data , X) X = the node (DATA) BEFORE you want to add
    #       - first must find the X:
    #       - check if n.data = x (data of the node you want) - use while loop to go there
    # 1. create the node
    # 3  n.ref = new_node
    def add_before(self, data, x):
        if self.head is None:
            print("LL is empty")
            return
        if self.head.data == x:
            new_node = Node(data)
            new_node.ref = self.head
            self.head = new_node
            return
        n = self.head
        while n.ref is not None:
            if n.ref.data == x:
                break
            n = n.ref
        if n.ref is None:
            print("Node is not found")
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
            
    def insert_empty(self, data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("LL is not empty")
            
### HOW TO DELETE A NODE AT DIFF POSITON - BEGINNING, END, AT GIVEN INDEX

    #deleting at the start of the LL
    #1. check if ll is empty or not --> if head is None, then lL is empty
    #2. if no, delete first node and make the head point to the second node
    
    def delete_begin(self):
        if self.head is None:
            print("LL is empty")
        else:
            self.head = self.head.ref
            
            
    # to del the last node:
    #   go to 2nd last node
    #   and then chnage the ref to None
    def delete_end(self):
        if self.head is None:
            print("LL is empty")
        elif self.head.ref is None:
            self.head = None
        else:
            n = self.head
            while n.ref.ref is not None:
                n = n.ref
            n.ref = None
            
    #deleting node at a given index
    #check if LL is empty or not!
    #1. check if the given node is 1st node
    #   if yes, make the head point to 2nd node
    #2. if not, go to the previous node and chnage the ref 
    def delete_by_value(self, x):
        if self.head is None:
            print ("LL is empty")
            return
        if x == self.head.data:
            self.head = self.head.ref
            return
        n = self.head
        while n.ref is not None:
            if x == n.ref.data:
                break
            n = n.ref
        if n.ref is None:
            print("Nod is not present")
        else:
            n.ref = n.ref.ref

LL1 = LinkedList()

#LL1.insert_empty(50)
LL1.add_begin(10)
LL1.add_begin(20)
LL1.add_begin(30)
LL1.delete_by_value(20)
#LL1.add_end(100)
#LL1.add_before(20,10)
#LL1.add_after(200, 100) # data is 200, and you want to add after the node that has 100

LL1.print_LL() # this is how you call the function -- to output the LL
